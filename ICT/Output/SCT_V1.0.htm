<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\SCT_V1.0.0]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\SCT_V1.0.0</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Nov 11 13:20:51 2019
<BR><P>
<H3>Maximum Stack Usage =       1344 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Data_Set_Query &rArr; FEC_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[29]">COMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[28]">DAC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from exti.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2b]">LCD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[16]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_stm32l1xx.o(.text) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[15]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2d]">TIM10_IRQHandler</a> from timer.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2e]">TIM11_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from timer.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from nb_process.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from nb_at.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3e]">TIM6_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[2c]">TIM9_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from nb_at.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[3d]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[26]">USB_HP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[27]">USB_LP_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32l1xx_md.o(.text) referenced from startup_stm32l1xx_md.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l1xx_md.o(.text)
 <LI><a href="#[2]">_sht10_data_pin_get</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[0]">_sht10_data_pin_set</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[4]">_sht10_data_pin_set_in</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[3]">_sht10_data_pin_set_out</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[1]">_sht10_sck_pin_set</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[43]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[7]">_temp_sht10_init</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[8]">_temp_sht10_read</a> from temp.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[5]">delay_ms</a> from delay.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[6]">delay_us</a> from delay.o(.text) referenced 2 times from temp.o(.data)
 <LI><a href="#[40]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">urc_connect_func</a> from nb_process.o(.text) referenced from nb_process.o(.constdata)
 <LI><a href="#[45]">urc_recvdata_func</a> from nb_process.o(.text) referenced from nb_process.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1bd]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[b9]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[1c9]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[ee]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1cc]"></a>ADC_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>ADC_CommonInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>ADC_CommonStructInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1cf]"></a>ADC_BankSelection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>ADC_PowerDownCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>ADC_DelaySelectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
</UL>

<P><STRONG><a name="[f2]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1d6]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[ef]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1dc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>ADC_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[1e7]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
</UL>

<P><STRONG><a name="[ea]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
</UL>

<P><STRONG><a name="[1ea]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
</UL>

<P><STRONG><a name="[1eb]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[1f3]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[1f7]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>FLASH_ReadAccess64Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>FLASH_SLEEPPowerDownCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[4a]"></a>FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>

<P><STRONG><a name="[1fb]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>FLASH_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[4c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BootConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BORConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP2Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP1Config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramWord
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseHalfWord
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[4e]"></a>FLASH_ErasePage</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[4f]"></a>FLASH_FastProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[d3]"></a>DATA_EEPROM_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[1fc]"></a>DATA_EEPROM_FixedTimeProgramCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>DATA_EEPROM_EraseByte</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[51]"></a>DATA_EEPROM_EraseHalfWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[52]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DATA_EEPROM_EraseWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[53]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[54]"></a>DATA_EEPROM_FastProgramByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
</UL>

<P><STRONG><a name="[55]"></a>DATA_EEPROM_FastProgramHalfWord</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[56]"></a>DATA_EEPROM_ProgramByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[57]"></a>DATA_EEPROM_ProgramHalfWord</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[58]"></a>DATA_EEPROM_ProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[59]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>

<P><STRONG><a name="[1fd]"></a>FLASH_OB_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>FLASH_OB_Launch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_OB_WRP1Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_OB_WRP2Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5d]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5e]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[5f]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[60]"></a>FLASH_OB_BootConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1ff]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>FLASH_OB_GetWRP1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>FLASH_OB_GetWRP2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>FLASH_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>GPIO_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_OUT
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_IN
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>

<P><STRONG><a name="[208]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sht10_data_pin_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[20a]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Off
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[bd]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_On
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
</UL>

<P><STRONG><a name="[120]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sht10_sck_pin_set
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sht10_data_pin_set
</UL>

<P><STRONG><a name="[20d]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[63]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[65]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[20e]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[17f]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[183]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[20f]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[182]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[218]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[222]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32l1xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[223]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>I2C_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[d5]"></a>PWR_RTCAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[226]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>PWR_FastWakeUpCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>PWR_UltraLowPowerCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>PWR_VoltageScalingConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>PWR_EnterLowPowerRunMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Mode
</UL>

<P><STRONG><a name="[22e]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
</UL>

<P><STRONG><a name="[69]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[68]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[232]"></a>RCC_AdjustMSICalibrationValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>RCC_MSIRangeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>RCC_MSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[d7]"></a>RCC_LSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[236]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
</UL>

<P><STRONG><a name="[238]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>RCC_LSEClockSecuritySystemCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>RCC_MCOConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
</UL>

<P><STRONG><a name="[fd]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
</UL>

<P><STRONG><a name="[23b]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[d8]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[d9]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[d6]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[b4]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[b3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[10d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[62]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[49]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[64]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[23e]"></a>RCC_AHBPeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[6b]"></a>RTC_EnterInitMode</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[6a]"></a>RTC_DeInit</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[6e]"></a>RTC_ExitInitMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[6d]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
</UL>

<P><STRONG><a name="[245]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RTC_RefClockCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[247]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>RTC_SetTime</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[248]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RTC_GetTime</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[249]"></a>RTC_GetSubSecond</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[24a]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>RTC_GetDate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[76]"></a>RTC_SetAlarm</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
</UL>

<P><STRONG><a name="[24b]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>RTC_GetAlarm</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[dc]"></a>RTC_AlarmCmd</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
</UL>

<P><STRONG><a name="[24c]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>RTC_OutputConfig</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[79]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[255]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[259]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>RTC_TamperCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32l1xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[dd]"></a>RTC_ITConfig</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
</UL>

<P><STRONG><a name="[264]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>RTC_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
</UL>

<P><STRONG><a name="[e0]"></a>RTC_GetITStatus</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f7]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[7d]"></a>I2S_Init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32l1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[266]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[268]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[c1]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[26d]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>

<P><STRONG><a name="[273]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>SYSCFG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[276]"></a>SYSCFG_RIDeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>SYSCFG_GetBootMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>SYSCFG_USBPuCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
</UL>

<P><STRONG><a name="[27a]"></a>SYSCFG_RITIMSelect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>SYSCFG_RITIMInputCaptureConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>SYSCFG_RIResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>SYSCFG_RIChannelSpeedConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>SYSCFG_RIIOSwitchConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>SYSCFG_RISwitchControlModeCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>SYSCFG_RIHysteresisConfig</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>TIM_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[10e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[281]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
</UL>

<P><STRONG><a name="[28d]"></a>TIM_OC1Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>TIM_OC2Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>TIM_OC3Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>TIM_OC4Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>TIM_OCStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>TIM_SelectOCREFClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[86]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[84]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[82]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[80]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[2ad]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[2ae]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
</UL>

<P><STRONG><a name="[2b2]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_init
</UL>

<P><STRONG><a name="[2b5]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[8a]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[8c]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[8e]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[8d]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[8f]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[2b9]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>TIM_RemapConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[91]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[2bf]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[2c2]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_OUT
</UL>

<P><STRONG><a name="[126]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2c5]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[b1]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_OUT
</UL>

<P><STRONG><a name="[ba]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[125]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = main &rArr; Data_Set_Query &rArr; FEC_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_temp_init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wireless_Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Led
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Time_Set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_ON
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Report
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(.text)
</UL>
<P><STRONG><a name="[2d3]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, system_stm32l1xx.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_recvData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Report
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_SendingPage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>USART1_OUT</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[b2]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[97]"></a>USART1_Configuration</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART1_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>USART1_Send</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_send
</UL>

<P><STRONG><a name="[c9]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
</UL>

<P><STRONG><a name="[99]"></a>SPI_NRF_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_NRF_Init &rArr; SPI1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>SPI_NRF_RW</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
</UL>

<P><STRONG><a name="[c3]"></a>SPI_NRF_WriteReg</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_NRF_WriteReg &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_LowPower_Mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
</UL>

<P><STRONG><a name="[c4]"></a>SPI_NRF_ReadReg</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_NRF_ReadReg &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
</UL>

<P><STRONG><a name="[c5]"></a>SPI_NRF_ReadBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_NRF_ReadBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Check
</UL>

<P><STRONG><a name="[c6]"></a>SPI_NRF_WriteBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_NRF_WriteBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Check
</UL>

<P><STRONG><a name="[c7]"></a>NRF_RX_Mode</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF_RX_Mode &rArr; SPI_NRF_WriteBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[c8]"></a>NRF_TX_Mode</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF_TX_Mode &rArr; SPI_NRF_WriteBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[9c]"></a>NRF_Check</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF_Check &rArr; SPI_NRF_WriteBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>NRF_Tx_Dat</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF_Tx_Dat &rArr; SPI_NRF_WriteBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[cd]"></a>NRF_Rx_Dat</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, 24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NRF_Rx_Dat &rArr; SPI_NRF_ReadBuf &rArr; SPI_NRF_RW
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_ReadReg
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[ce]"></a>NRF_LowPower_Mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, 24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_WriteReg
</UL>

<P><STRONG><a name="[d1]"></a>STMFLASH_ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stmflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>

<P><STRONG><a name="[cf]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[d0]"></a>STMFLASH_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
</UL>

<P><STRONG><a name="[d2]"></a>STMFLASH_Write</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, stmflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
</UL>

<P><STRONG><a name="[d4]"></a>Test_Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stmflash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[93]"></a>RTC_Configuration</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RTC_Configuration &rArr; RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCResetCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_RTCAccessCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>RTC_Time_Set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_Time_Set &rArr; RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>RTC_Alarm_Configuration</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_Alarm_Configuration &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
</UL>

<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; TIM2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Mode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>iso_date</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = iso_date
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[e7]"></a>Adc_Key_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc_Key_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[e8]"></a>DMA_init</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[9d]"></a>Adc_Init</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Adc_Init &rArr; DMA_init &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>Adc_Key_On</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adc_Key_On
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[f5]"></a>Adc_Key_Off</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adc_Key_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[2d4]"></a>Get_Adc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>Get_Adc_Average</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_Adc_Average
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[bc]"></a>SPI1_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NRF_Init
</UL>

<P><STRONG><a name="[ca]"></a>SPI1_SetSpeed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_SetSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Check
</UL>

<P><STRONG><a name="[f9]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>

<P><STRONG><a name="[e1]"></a>Run_Mode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Run_Mode &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>Stop_Mode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[100]"></a>DS18B20_IO_IN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS18B20_IO_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>

<P><STRONG><a name="[101]"></a>DS18B20_Check</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS18B20_Check &rArr; DS18B20_IO_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_IN
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[102]"></a>DS18B20_IO_OUT</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
</UL>

<P><STRONG><a name="[103]"></a>DS18B20_Rst</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS18B20_Rst &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_OUT
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Init
</UL>

<P><STRONG><a name="[9a]"></a>DS18B20_Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DS18B20_Init &rArr; DS18B20_Rst &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>DS18B20_Write_Byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DS18B20_Write_Byte &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_OUT
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
</UL>

<P><STRONG><a name="[105]"></a>DS18B20_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DS18B20_Start &rArr; DS18B20_Write_Byte &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[106]"></a>DS18B20_Read_Bit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS18B20_Read_Bit &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_OUT
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_IO_IN
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
</UL>

<P><STRONG><a name="[107]"></a>DS18B20_Read_Byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DS18B20_Read_Byte &rArr; DS18B20_Read_Bit &rArr; DS18B20_IO_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
</UL>

<P><STRONG><a name="[108]"></a>DS18B20_Get_Temp</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, ds18b20.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Read_Byte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Write_Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Rst
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Check
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[e4]"></a>TIM2_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>TIM10_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM10_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>TIM10_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM10_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d5]"></a>sht10_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sht10.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>sht10_strsmission_start</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sht10_strsmission_start
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_measure
</UL>

<P><STRONG><a name="[121]"></a>sht10_connection_reset</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sht10_connection_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_read
</UL>

<P><STRONG><a name="[114]"></a>sht10_measure</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sht10_measure &rArr; sht10_read_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_strsmission_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_read_byte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_read
</UL>

<P><STRONG><a name="[118]"></a>sht10_calc</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sht10_calc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_read
</UL>

<P><STRONG><a name="[9b]"></a>sht10_temp_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sht10_temp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>sht10_temp_read</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, temp.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>NBBCxx_parser</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nb_at.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>NBBCxx_recv</STRONG> (Thumb, 106 bytes, Stack size 1032 bytes, nb_at.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNMGS_char
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToStr1
</UL>

<P><STRONG><a name="[12c]"></a>TIM4_init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_init
</UL>

<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM4_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[2d7]"></a>UARTx_write</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nb_at.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>NBAT_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nb_at.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
</UL>

<P><STRONG><a name="[130]"></a>NBAT_checkCmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_recvData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[132]"></a>NBAT_checkUrc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NBAT_checkUrc &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_recvData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[133]"></a>NBAT_sendCmd</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, nb_at.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkUrc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNMGS_char
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_LowPower_Mode
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSORFTcp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOSDTcp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOTSUdp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOCOTcp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOCR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCSCON
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCGATT
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setCGDCONT
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNCDP
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCOPS
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setCEREG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCEREG
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCSQ
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setCGATT
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCIMI
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getNBAND
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setCMEE
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getACK
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_reboot
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_checkModel
</UL>

<P><STRONG><a name="[135]"></a>NBAT_getUrc</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, nb_at.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getUrc
</UL>

<P><STRONG><a name="[136]"></a>NBAT_recvData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, nb_at.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkUrc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkCmd
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[138]"></a>NBBCxx_checkModel</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[139]"></a>NBBCxx_reboot</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[13a]"></a>NBBCxx_getACK</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[13b]"></a>NBBCxx_setCMEE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[13c]"></a>NBBCxx_getNBAND</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[13d]"></a>NBBCxx_getCIMI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[13e]"></a>NBBCxx_setCGATT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[13f]"></a>NBBCxx_getCSQ</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[140]"></a>NBBCxx_getCEREG</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[141]"></a>NBBCxx_setCEREG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[142]"></a>NBBCxx_getCOPS</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[143]"></a>NBBCxx_setNCDP</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[12b]"></a>NBBCxx_setNMGS_char</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_recv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>

<P><STRONG><a name="[144]"></a>NBBCxx_setCGDCONT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[145]"></a>NBBCxx_getCGATT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[146]"></a>NBBCxx_getCSCON</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[147]"></a>NBBCxx_setNSOCR</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[148]"></a>NBBCxx_setNSOCOTcp</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[149]"></a>NBBCxx_setNSOTSUdp</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_checkHexStr
</UL>

<P><STRONG><a name="[14a]"></a>NBBCxx_setNSOSDTcp</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_checkHexStr
</UL>

<P><STRONG><a name="[14b]"></a>NBBCxx_setNSORFTcp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nb_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = NBBCxx_setNSORFTcp &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recvdata_func
</UL>

<P><STRONG><a name="[152]"></a>NBBCxx_setUrcTable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[14d]"></a>NBBCxx_getUrc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_getUrc
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Connect
</UL>

<P><STRONG><a name="[14e]"></a>NB_LowPower_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
</UL>

<P><STRONG><a name="[154]"></a>hexToStr</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>

<P><STRONG><a name="[12a]"></a>hexToStr1</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nb_process.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_recv
</UL>

<P><STRONG><a name="[14f]"></a>strToHex</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[150]"></a>TIM3_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, nb_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
</UL>

<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>NBBCxx_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NBBCxx_init &rArr; TIM4_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>NB_Connect</STRONG> (Thumb, 390 bytes, Stack size 176 bytes, nb_process.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getUrc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setUrcTable
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNCDP
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCEREG
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCSQ
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCIMI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_reboot
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_checkModel
</UL>

<P><STRONG><a name="[153]"></a>NB_DataSend</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNMGS_char
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Version_Query
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Query
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[161]"></a>NB_Close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nb_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
</UL>

<P><STRONG><a name="[a4]"></a>Wireless_Key_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Wireless_Key_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_md.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>Config_Info_Save</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
</UL>

<P><STRONG><a name="[a6]"></a>Config_Info_Read</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Config_Info_Read &rArr; STMFLASH_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[a5]"></a>Config_Init</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Config_Init &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>BLEndianInt32</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[158]"></a>ICT_Data_Call</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ICT_Data_Call &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_On
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
</UL>

<P><STRONG><a name="[15c]"></a>WTM_Data_Call</STRONG> (Thumb, 504 bytes, Stack size 128 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = WTM_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
</UL>

<P><STRONG><a name="[15f]"></a>BLEndianInt16</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
</UL>

<P><STRONG><a name="[15e]"></a>WVS_Data_Call</STRONG> (Thumb, 438 bytes, Stack size 152 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = WVS_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
</UL>

<P><STRONG><a name="[160]"></a>FEC_Data_Call</STRONG> (Thumb, 450 bytes, Stack size 152 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FEC_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
</UL>

<P><STRONG><a name="[ab]"></a>Data_Call</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Data_Call &rArr; FEC_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
</UL>

<P><STRONG><a name="[162]"></a>ICT_Data_Report</STRONG> (Thumb, 460 bytes, Stack size 88 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ICT_Data_Report &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_Off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Key_On
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Report
</UL>

<P><STRONG><a name="[164]"></a>Sensor_Data_Report</STRONG> (Thumb, 638 bytes, Stack size 144 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Sensor_Data_Report &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_Close
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Report
</UL>

<P><STRONG><a name="[ac]"></a>Data_Report</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = Data_Report &rArr; Sensor_Data_Report &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>ICT_Threshold_Set</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ICT_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[167]"></a>WTM_Threshold_Set</STRONG> (Thumb, 552 bytes, Stack size 160 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WTM_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[168]"></a>WVS_Threshold_Set</STRONG> (Thumb, 642 bytes, Stack size 160 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = WVS_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[169]"></a>FEC_Threshold_Set</STRONG> (Thumb, 542 bytes, Stack size 160 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FEC_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16a]"></a>Freq_Set</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Freq_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16b]"></a>Time_Set</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Time_Set &rArr; RTC_Alarm_Configuration &rArr; RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_Configuration
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16c]"></a>ICT_Threshold_Query</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ICT_Threshold_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16d]"></a>WTM_Threshold_Query</STRONG> (Thumb, 296 bytes, Stack size 112 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = WTM_Threshold_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16e]"></a>WVS_Threshold_Query</STRONG> (Thumb, 302 bytes, Stack size 112 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = WVS_Threshold_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[16f]"></a>FEC_Threshold_Query</STRONG> (Thumb, 336 bytes, Stack size 112 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = FEC_Threshold_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt32
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[171]"></a>Freq_Query</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Freq_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEndianInt16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[172]"></a>Software_Version_Query</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Software_Version_Query &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
</UL>

<P><STRONG><a name="[ad]"></a>Data_Set_Query</STRONG> (Thumb, 288 bytes, Stack size 1040 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = Data_Set_Query &rArr; FEC_Threshold_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Version_Query
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Query
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>Sensor_ID_Set</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Sensor_ID_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Rx_Dat
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_Tx_Dat
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_TX_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_RX_Mode
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Info_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
</UL>

<P><STRONG><a name="[2d8]"></a>Data_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>BLEndianFloat</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, protocol.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>KEY_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>SDA_OUT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[175]"></a>SDA_IN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SDA_IN &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[176]"></a>IIC_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>

<P><STRONG><a name="[177]"></a>IIC_Stop</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[178]"></a>IIC_Wait_Ack</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>

<P><STRONG><a name="[179]"></a>IIC_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_Ack &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[17a]"></a>IIC_NAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[17b]"></a>IIC_Send_Byte</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_Send_Byte &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>

<P><STRONG><a name="[17c]"></a>IIC_Read_Byte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
</UL>

<P><STRONG><a name="[a8]"></a>Key_Read</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Key_Read &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
</UL>

<P><STRONG><a name="[17d]"></a>I2C_WriteByte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[184]"></a>WriteCmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_OFF
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ON
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
</UL>

<P><STRONG><a name="[a0]"></a>OLED_Init</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>WriteDat</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteDat &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar_Small
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>

<P><STRONG><a name="[187]"></a>OLED_SetPos</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawBMP
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar_Small
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>

<P><STRONG><a name="[a1]"></a>OLED_Fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_SendingPage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[188]"></a>OLED_CLS</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_CLS &rArr; OLED_Fill &rArr; WriteDat &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
</UL>

<P><STRONG><a name="[189]"></a>OLED_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[18a]"></a>OLED_OFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[18b]"></a>OLED_ShowStr</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumLeftOption
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumRightOption
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp_NumLeftOption
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp_NumRightOption
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_NumLeftOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_NumRightOption
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDMenu
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line9
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line8
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line7
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line6
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line5
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line3
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line1
</UL>

<P><STRONG><a name="[18c]"></a>OLED_ShowChar</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChar &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_SendingPage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
</UL>

<P><STRONG><a name="[18d]"></a>OLED_ShowChar_Small</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowChar_Small &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
</UL>

<P><STRONG><a name="[18e]"></a>OLED_ShowCN</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_ShowCN &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line9
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line8
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line7
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line6
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line5
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line3
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line1
</UL>

<P><STRONG><a name="[18f]"></a>OLED_DrawBMP</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetPos
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteDat
</UL>

<P><STRONG><a name="[190]"></a>OLED_Line1</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line1 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[191]"></a>OLED_Line2</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line2 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[192]"></a>OLED_Line3</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line3 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[193]"></a>OLED_Line4</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line4 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[194]"></a>OLED_Line5</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line5 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[195]"></a>OLED_Line6</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line6 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[196]"></a>OLED_Line7</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line7 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[197]"></a>OLED_Line8</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line8 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[198]"></a>OLED_Line9</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
</UL>

<P><STRONG><a name="[199]"></a>Display_OLEDLine</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line9
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line8
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line7
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line6
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line5
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line4
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line3
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Line1
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDMenu
</UL>

<P><STRONG><a name="[19a]"></a>Display_OLEDMenu</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDLine
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuUpOneOption
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDownOneOption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
</UL>

<P><STRONG><a name="[19b]"></a>MenuCancelOption</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
</UL>

<P><STRONG><a name="[19c]"></a>Function9</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Function9 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[19d]"></a>Function8</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Function8 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[19e]"></a>Vib_NumRightOption</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Vib_NumRightOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
</UL>

<P><STRONG><a name="[19f]"></a>Vib_NumLeftOption</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Vib_NumLeftOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
</UL>

<P><STRONG><a name="[1a0]"></a>Function7</STRONG> (Thumb, 728 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Function7 &rArr; Sensor_ID_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_NumLeftOption
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vib_NumRightOption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1a2]"></a>Tmp_NumRightOption</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Tmp_NumRightOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
</UL>

<P><STRONG><a name="[1a3]"></a>Tmp_NumLeftOption</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Tmp_NumLeftOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
</UL>

<P><STRONG><a name="[1a4]"></a>Function6</STRONG> (Thumb, 618 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Function6 &rArr; Sensor_ID_Set &rArr; Config_Info_Save &rArr; STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; DATA_EEPROM_ProgramHalfWord &rArr; DATA_EEPROM_FastProgramByte &rArr; DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp_NumLeftOption
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tmp_NumRightOption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1a5]"></a>Function5</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Function5 &rArr; Data_Call &rArr; FEC_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Call
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_SendingPage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_OkPage
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1a7]"></a>Function4</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Function4 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1a8]"></a>Function3</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Function3 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1a9]"></a>Function2</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Function2 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1aa]"></a>NumRightOption</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NumRightOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
</UL>

<P><STRONG><a name="[1ab]"></a>NumLeftOption</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NumLeftOption &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
</UL>

<P><STRONG><a name="[1ac]"></a>Function1</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Function1 &rArr; MenuCancelOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumLeftOption
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumRightOption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowStr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
</UL>

<P><STRONG><a name="[1ad]"></a>MenuEnterOption</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = MenuEnterOption &rArr; Function5 &rArr; Data_Call &rArr; FEC_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
</UL>

<P><STRONG><a name="[1ae]"></a>MenuDownOneOption</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MenuDownOneOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
</UL>

<P><STRONG><a name="[1af]"></a>MenuUpOneOption</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MenuUpOneOption &rArr; Display_OLEDMenu &rArr; Display_OLEDLine &rArr; OLED_Line9 &rArr; OLED_ShowStr &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_OLEDMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
</UL>

<P><STRONG><a name="[aa]"></a>MenuReflash</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, menu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = MenuReflash &rArr; MenuEnterOption &rArr; Function5 &rArr; Data_Call &rArr; FEC_Data_Call &rArr; NB_DataSend &rArr; NBBCxx_setNMGS_char &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_BEEP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Read
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuUpOneOption
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuDownOneOption
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuEnterOption
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuCancelOption
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>LED_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Run_Led</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Run_Led
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>BEEP_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BEEP_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>Run_BEEP</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Run_BEEP
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuReflash
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function1
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function8
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function9
</UL>

<P><STRONG><a name="[9e]"></a>POWER_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = POWER_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>POWER_ON</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, switch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = POWER_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>Show_HomePage</STRONG> (Thumb, 984 bytes, Stack size 56 bytes, show.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Show_HomePage &rArr; DS18B20_Get_Temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Adc_Average
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowCN
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar_Small
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>Show_OkPage</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, show.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_OkPage &rArr; OLED_ShowChar &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function6
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function7
</UL>

<P><STRONG><a name="[1a6]"></a>Show_SendingPage</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, show.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Show_SendingPage &rArr; OLED_ShowChar &rArr; OLED_SetPos &rArr; WriteCmd &rArr; I2C_WriteByte &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function5
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_recvData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_getUrc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Set_Query
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Query
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Freq_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_date
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
</UL>

<P><STRONG><a name="[2da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NB_DataSend
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_recv
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_ID_Set
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_Version_Query
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_recvdata_func
</UL>

<P><STRONG><a name="[2dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[131]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkUrc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_checkCmd
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCSCON
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCGATT
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCOPS
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getCEREG
</UL>

<P><STRONG><a name="[124]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNMGS_char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_parser
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strToHex
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOSDTcp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOTSUdp
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_checkHexStr
</UL>

<P><STRONG><a name="[128]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_recv
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
</UL>

<P><STRONG><a name="[1b5]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_temp_sht10_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Query
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Get_Temp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Query
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Data_Report
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[2de]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Threshold_Set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Threshold_Set
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Threshold_Set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Call
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FEC_Data_Call
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WVS_Data_Call
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WTM_Data_Call
</UL>

<P><STRONG><a name="[163]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_HomePage
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICT_Data_Report
</UL>

<P><STRONG><a name="[2df]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b7]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[1b3]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[1ba]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2e7]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[134]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNMGS_char
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBAT_sendCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSORFTcp
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOSDTcp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOTSUdp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOCOTcp
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOCR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNCDP
</UL>

<P><STRONG><a name="[2e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[72]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[71]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[87]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[85]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[83]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[81]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ae]"></a>SetSysClock</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[116]"></a>sht10_write_byte</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sht10_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_measure
</UL>

<P><STRONG><a name="[117]"></a>sht10_read_byte</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, sht10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sht10_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_measure
</UL>

<P><STRONG><a name="[0]"></a>_sht10_data_pin_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sht10_data_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>_sht10_sck_pin_set</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sht10_sck_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_sht10_data_pin_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sht10_data_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_sht10_data_pin_set_out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_sht10_data_pin_set_in</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, temp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_temp_sht10_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _temp_sht10_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_temp_sht10_read</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, temp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _temp_sht10_read &rArr; sht10_calc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_calc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_measure
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sht10_connection_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> temp.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>NBBCxx_checkHexStr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOSDTcp
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSOTSUdp
</UL>

<P><STRONG><a name="[14c]"></a>get_urc_obj</STRONG> (Thumb, 638 bytes, Stack size 32 bytes, nb_interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_getUrc
</UL>

<P><STRONG><a name="[44]"></a>urc_connect_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nb_process.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nb_process.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>urc_recvdata_func</STRONG> (Thumb, 32 bytes, Stack size 112 bytes, nb_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = urc_recvdata_func &rArr; NBBCxx_setNSORFTcp &rArr; NBAT_sendCmd &rArr; NBAT_checkCmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBBCxx_setNSORFTcp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_process.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c0]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
